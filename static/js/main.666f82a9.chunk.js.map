{"version":3,"sources":["Flights.js","App.js","reportWebVitals.js","index.js"],"names":["Flights","Flight","RandomPrice","Math","floor","random","href","className","class","App","useState","FlightName","setFlightName","Origin","SetOrigin","DateOfJourney","SetDate","query_Origin","setQuery_Origin","query_Destination","setQuery_Dest","Destination","SetDestination","useEffect","console","log","getFlightName","a","DateConvert","toISOString","Date_final","slice","fetch","response","json","data","Carriers","onSubmit","e","preventDefault","name","placeholder","value","onChange","target","selected","date","dateFormat","minDate","Date","type","map","flight","Name","CarrierId","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4LAuBeA,G,MArBC,SAAC,GAAa,IAAZC,EAAW,EAAXA,OAIVC,EAAcC,KAAKC,MAAoB,GAAdD,KAAKE,UAAa,GAC/C,OACI,mBAAGC,KAAO,GAAV,SACA,sBAAKC,UAAU,UAAf,UACI,8BAAG,6CAAH,IAAwBN,KACxB,oBAAGO,MAAQ,QAAX,UAAmB,uCAAnB,IAAkCN,EAAlC,OACA,wBAAQK,UAAY,0BAApB,sBACA,8B,uBC8IGE,MAnJf,WAAiB,IAAD,EAGsBC,mBAAS,IAH/B,mBAGNC,EAHM,KAGKC,EAHL,OAIcF,mBAAS,IAJvB,mBAING,EAJM,KAICC,EAJD,OAKWJ,mBAAS,IALpB,gCAMmBA,mBAAS,OAN5B,mBAMNK,EANM,KAMQC,EANR,OAO0BN,mBAAS,SAPnC,mBAONO,EAPM,KAOOC,EAPP,OAQ6BR,mBAAS,WARtC,mBAQNS,EARM,KAQYC,EARZ,OASwBV,mBAAS,IATjC,mBASNW,EATM,KASMC,EATN,KAYbC,qBAAU,WAIRC,QAAQC,IAAI,sBACbC,MACC,CAACT,EAAaF,EAAcI,IAK9B,IAAMO,EAAa,uCAAG,kCAAAC,EAAA,6DAED,MAAjBZ,GAEKa,EAAcb,EAAcc,cAC9BC,EAAaF,EAAYG,MAAM,EAAE,IACrCP,QAAQC,IAAIK,IAIRA,EAAa,aAVE,SAcAE,MAAM,4GAAD,OAA6Gb,EAA7G,YAAkIF,EAAlI,YAAkJa,EAAlJ,+BAAmLA,GAAc,CAC7N,OAAU,MACV,QAAW,CACX,iBAAkB,qDAClB,kBAAmB,2DAlBI,cAcjBG,EAdiB,gBAqBHA,EAASC,OArBN,OAqBhBC,EArBgB,OAsBtBX,QAAQC,IAAIU,GAEZvB,EAAcuB,EAAKC,UACnBZ,QAAQC,IAAIU,EAAKC,UAzBK,4CAAH,qDA6DnB,GAAkB,MAAfrB,EACH,CACE,IACMe,EADcf,EAAcc,cACHE,MAAM,EAAE,IACvCP,QAAQC,IAAIK,GAiBd,OACI,gCAEC,yDACA,qBAAKvB,UAAY,cAAjB,SACA,uBAAM8B,SAZQ,SAAAC,GAChBA,EAAEC,iBACFrB,EAAgBL,GAChBO,EAAcC,GACdG,QAAQC,IAAIZ,IAQV,UACE,uBAAO2B,KAAO,SAASC,YAAc,OAAOC,MAAS7B,EAAQ8B,SArB/C,SAAAL,GAEnBxB,EAAUwB,EAAEM,OAAOF,UAqBd,uBAAOF,KAAO,cAAcC,YAAc,KAAKC,MAASrB,EAAasB,SAlBxD,SAAAL,GACjBhB,EAAegB,EAAEM,OAAOF,UAmBpB,2CALF,IAKoB,cAAC,IAAD,CAAYnC,UAAU,aAAasC,SAAY9B,EAAe4B,SAAY,SAACG,GAAD,OAAW9B,EAAQ8B,IAAQC,WAAa,aAAaC,QAAW,IAAIC,OAChK,4BACA,wBAAQ1C,UAAY,kBAAkB2C,KAAO,SAA7C,2BAIA,gDACAvC,EAAWwC,KAAI,SAAAC,GAAM,OACnB,cAAC,EAAD,CAEAnD,OAAUmD,EAAOC,MADVD,EAAOE,cAWjB,sBAAK9C,MAAM,aAAX,UACA,wBACA,wBACA,wBACA,+BCvIM+C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.666f82a9.chunk.js","sourcesContent":["import React from 'react'\r\nimport \"./App.css\"\r\nconst Flights = ({Flight}) =>{\r\n    const style = {\r\n        \"background-color\":\"#F0F0F0\"\r\n    }\r\n    var RandomPrice = Math.floor(Math.random()*50)+10\r\n    return(\r\n        <a href = \"\">\r\n        <div className=\"Flights\" >\r\n            <p><b>Flight Name:</b> {Flight}</p>\r\n            <p class = \"Price\"><b>Price:</b> {RandomPrice}$</p>\r\n            <button className = \"btn btn-outline-primary\">Book Now</button>\r\n            <hr/>\r\n        </div>\r\n        </a>\r\n    //     <ul>\r\n    //     <li>\r\n    //     Flight Name: {Flight}\r\n    //     </li>\r\n    // </ul> \r\n    );\r\n}\r\nexport default Flights","\n\nimport React,{useEffect,useState} from 'react'\nimport Flights from './Flights'\nimport AminPrice from './minPrice'\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\"\nimport \"./App.css\"\nfunction App () {\n\n   \n   const [FlightName,setFlightName] = useState([]);\n   const [Origin,SetOrigin] = useState(\"\");\n   const [Price,SetPrice]= useState([]);\n   const [DateOfJourney,SetDate] = useState(null);\n   const [query_Origin,setQuery_Origin] = useState(\"US-NY\");\n   const [query_Destination,setQuery_Dest] = useState(\"SFO-sky\");\n   const [Destination,SetDestination] = useState(\"\");\n   \n   \n   useEffect(()=>\n   {\n     //getMinPrice();\n     \n     console.log(\"Calling Use effect\")\n    getFlightName();\n   },[query_Origin,DateOfJourney,query_Destination]);\n   \n   \n   \n   \n   const getFlightName = async () =>{\n    \n    if(DateOfJourney != null)\n    {\n      const DateConvert = DateOfJourney.toISOString()\n      var Date_final = DateConvert.slice(0,10)\n      console.log(Date_final)\n    }\n    else\n    {\n      var Date_final = '2020-12-20'\n    }\n      \n    \n  const response = await fetch(`https://skyscanner-skyscanner-flight-search-v1.p.rapidapi.com/apiservices/browsequotes/v1.0/US/USD/en-US/${query_Destination}/${query_Origin}/${Date_final}?inboundpartialdate=${Date_final}`, {\n  \"method\": \"GET\",\n  \"headers\": {\n  \"x-rapidapi-key\": \"36a93f6ea0msh2414af55d6f88eap14a4c9jsn04cb0f41b6c1\",\n  \"x-rapidapi-host\": \"skyscanner-skyscanner-flight-search-v1.p.rapidapi.com\"\n }\n   });\n   const data = await response.json();\n   console.log(data)\n   //SetPrice(data.Quotes);\n   setFlightName(data.Carriers);\n   console.log(data.Carriers);\n   };\n\n\n\n  //  const getMinPrice = async () =>{\n  //   if(DateOfJourney != null)\n  //   {\n  //     const DateConvert = DateOfJourney.toISOString()\n  //     var Date_final = DateConvert.slice(0,10)\n  //     console.log(Date_final)\n  //   }\n  //   else\n  //   {\n  //     var Date_final = '2020-12-20'\n  //   }\n  //  const response = await fetch(`https://skyscanner-skyscanner-flight-search-v1.p.rapidapi.com/apiservices/browsequotes/v1.0/US/USD/en-US/${query_Destination}/${query_Origin}/${Date_final}?inboundpartialdate=${Date_final}`, {\n  //  \"method\": \"GET\",\n  //  \"headers\": {\n  //    \"x-rapidapi-key\": \"36a93f6ea0msh2414af55d6f88eap14a4c9jsn04cb0f41b6c1\",\n  //    \"x-rapidapi-host\": \"skyscanner-skyscanner-flight-search-v1.p.rapidapi.com\"\n  //  }\n  //    });\n  //    const data = await response.json();\n  //    //console.log(data)\n  //    SetPrice(data.Quotes);\n  //    //setFlightName(data.Carriers);\n  //    console.log(data.Quotes);\n  //    };\n\n\n\n\n   const UpdateDate = e => {\n      console.log(DateOfJourney.toISOString());\n   }\n   if(DateOfJourney!=null)\n   {\n     const DateConvert = DateOfJourney.toISOString()\n     const Date_final = DateConvert.slice(0,10)\n     console.log(Date_final)\n   }\n   const updateOrigin = e=> {\n     \n     SetOrigin(e.target.value)  \n     //console.log(Origin) \n    }\n    const updateDest = e => {\n      SetDestination(e.target.value)\n    }\n    const getSearch = e => {\n      e.preventDefault();\n      setQuery_Origin(Origin);\n      setQuery_Dest(Destination);\n      console.log(Origin)\n    }\n    \n   return(\n       <div>\n        \n        <h1>Dude Airline Bookings: </h1>\n        <div className = \"Input_field\">\n        <form onSubmit = {getSearch}>\n          <input name = \"Origin\" placeholder = \"From\" value = {Origin} onChange = {updateOrigin} \n          />\n          <input name = \"Destination\" placeholder = \"To\" value = {Destination} onChange = {updateDest}\n          />\n          <p>Departure:</p> <DatePicker className=\"DatePicker\" selected = {DateOfJourney} onChange = {(date) => (SetDate(date))} dateFormat = 'yyyy/mm/dd' minDate = {new Date()}/>\n          <p>\n          <button className = \"btn btn-primary\" type = \"submit\">Search</button>\n          </p>\n          </form>\n          </div>\n          <h2>Search Results</h2>\n         {FlightName.map(flight => (\n            <Flights \n            key = {flight.CarrierId}\n            Flight = {flight.Name}\n            />\n         ))}\n\n         {/* {Price.map(price => (\n           <AminPrice \n           key = {price.QuoteId}\n           min = {price.MinPrice} \n           />\n         ))} */}\n         <div class=\"lds-roller\">\n         <div></div>\n         <div></div>\n         <div></div>\n         <div></div>\n       </div>\n       </div>\n       \n   )\n   \n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}